AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Exported by architect/package@1.3.2 on 2020-04-30T15:10:30.455Z
Resources:
  ArchitectServerlessApp:
    Type: AWS::Serverless::Api
    Properties:
      StageName: staging
      DefinitionBody:
        openapi: 3.0.1
        info:
          title:
            Ref: AWS::StackName
        paths:
          /:
            get:
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetIndex.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    contentHandling: CONVERT_TO_TEXT
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
          /tasks/{taskOwner}:
            options:
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OptionsTasksTaskOwner.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    contentHandling: CONVERT_TO_TEXT
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
            get:
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTasksTaskOwner.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    contentHandling: CONVERT_TO_TEXT
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
            post:
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostTasksTaskOwner.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    contentHandling: CONVERT_TO_TEXT
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
          /tasks/{taskOwner}/{taskId}:
            options:
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OptionsTasksTaskOwnerTaskId.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    contentHandling: CONVERT_TO_TEXT
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
            get:
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTasksTaskOwnerTaskId.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    contentHandling: CONVERT_TO_TEXT
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
            put:
              responses:
                '200':
                  description: 200 response
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutTasksTaskOwnerTaskId.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                    contentHandling: CONVERT_TO_TEXT
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
          /{proxy+}:
            x-amazon-apigateway-any-method:
              parameters:
              - name: proxy
                in: path
                required: true
                schema:
                  type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetIndex.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                passthroughBehavior: when_no_match
                httpMethod: POST
                cacheNamespace: xlr8r
                cacheKeyParameters:
                - method.request.path.proxy
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
          /_static/{proxy+}:
            x-amazon-apigateway-any-method:
              parameters:
              - name: proxy
                in: path
                required: true
                schema:
                  type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub:
                  - http://${bukkit}.s3.${AWS::Region}.amazonaws.com/{proxy}
                  - bukkit:
                      Ref: StaticBucket
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.path.proxy: method.request.path.proxy
                passthroughBehavior: when_no_match
                httpMethod: ANY
                cacheNamespace: xlr8r2
                cacheKeyParameters:
                - method.request.path.proxy
                type: http_proxy
      EndpointConfiguration: REGIONAL
      BinaryMediaTypes:
      - '*~1*'
      MinimumCompressionSize: 0
      Cors:
        AllowMethods: '''GET,PUT,POST,DELETE,OPTIONS'''
        AllowHeaders: '''X-Forwarded-For,Content-Type,Authorization'''
        AllowOrigin: '''http://localhost:3000'''
        MaxAge: 600
      Auth:
        DefaultAuthorizer: Authorizer
        Authorizers:
          Authorizer:
            UserPoolArn:
              Fn::ImportValue: cognito-stack-dev-UserPoolArn
        AddDefaultAuthorizerToCorsPreflight: false
  GetIndex:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://architect-serverless-app-cfn-deployments-9f2f3/3fb976ed5060081de068439828be92f5
      Runtime: nodejs12.x
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_ROLE:
            Ref: Role
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_APP_NAME: architect-serverless-app
          ARC_HTTP: aws_proxy
          NODE_ENV: staging
          SESSION_TABLE_NAME: jwe
          TASKS_TABLE_NAME:
            Fn::ImportValue: cognito-stack-dev-SharedTasksTableName
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetIndexEvent:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId:
              Ref: ArchitectServerlessApp
  OptionsTasksTaskOwner:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://architect-serverless-app-cfn-deployments-9f2f3/2e270a4a911ac68caae85fdf6ab7f30f
      Runtime: nodejs12.x
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_ROLE:
            Ref: Role
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_APP_NAME: architect-serverless-app
          ARC_HTTP: aws_proxy
          NODE_ENV: staging
          SESSION_TABLE_NAME: jwe
          TASKS_TABLE_NAME:
            Fn::ImportValue: cognito-stack-dev-SharedTasksTableName
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        OptionsTasksTaskOwnerEvent:
          Type: Api
          Properties:
            Path: /tasks/{taskOwner}
            Method: OPTIONS
            RestApiId:
              Ref: ArchitectServerlessApp
  OptionsTasksTaskOwnerTaskId:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://architect-serverless-app-cfn-deployments-9f2f3/d317da6f8642f1a1d307cc1ffa44c3f2
      Runtime: nodejs12.x
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_ROLE:
            Ref: Role
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_APP_NAME: architect-serverless-app
          ARC_HTTP: aws_proxy
          NODE_ENV: staging
          SESSION_TABLE_NAME: jwe
          TASKS_TABLE_NAME:
            Fn::ImportValue: cognito-stack-dev-SharedTasksTableName
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        OptionsTasksTaskOwnerTaskIdEvent:
          Type: Api
          Properties:
            Path: /tasks/{taskOwner}/{taskId}
            Method: OPTIONS
            RestApiId:
              Ref: ArchitectServerlessApp
  GetTasksTaskOwner:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://architect-serverless-app-cfn-deployments-9f2f3/988c67a5b4aa465a8d1245eec6401728
      Runtime: nodejs12.x
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_ROLE:
            Ref: Role
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_APP_NAME: architect-serverless-app
          ARC_HTTP: aws_proxy
          NODE_ENV: staging
          SESSION_TABLE_NAME: jwe
          TASKS_TABLE_NAME:
            Fn::ImportValue: cognito-stack-dev-SharedTasksTableName
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetTasksTaskOwnerEvent:
          Type: Api
          Properties:
            Path: /tasks/{taskOwner}
            Method: GET
            RestApiId:
              Ref: ArchitectServerlessApp
  GetTasksTaskOwnerTaskId:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://architect-serverless-app-cfn-deployments-9f2f3/2de65371f564c761b0aa69f4b41e4da3
      Runtime: nodejs12.x
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_ROLE:
            Ref: Role
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_APP_NAME: architect-serverless-app
          ARC_HTTP: aws_proxy
          NODE_ENV: staging
          SESSION_TABLE_NAME: jwe
          TASKS_TABLE_NAME:
            Fn::ImportValue: cognito-stack-dev-SharedTasksTableName
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetTasksTaskOwnerTaskIdEvent:
          Type: Api
          Properties:
            Path: /tasks/{taskOwner}/{taskId}
            Method: GET
            RestApiId:
              Ref: ArchitectServerlessApp
  PostTasksTaskOwner:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://architect-serverless-app-cfn-deployments-9f2f3/52dc24d212f8ef142cf9466df89bb579
      Runtime: nodejs12.x
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_ROLE:
            Ref: Role
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_APP_NAME: architect-serverless-app
          ARC_HTTP: aws_proxy
          NODE_ENV: staging
          SESSION_TABLE_NAME: jwe
          TASKS_TABLE_NAME:
            Fn::ImportValue: cognito-stack-dev-SharedTasksTableName
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        PostTasksTaskOwnerEvent:
          Type: Api
          Properties:
            Path: /tasks/{taskOwner}
            Method: POST
            RestApiId:
              Ref: ArchitectServerlessApp
  PutTasksTaskOwnerTaskId:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://architect-serverless-app-cfn-deployments-9f2f3/7a8cdebc701125d32ca4076132bcd879
      Runtime: nodejs12.x
      MemorySize: 1152
      Timeout: 5
      Environment:
        Variables:
          ARC_ROLE:
            Ref: Role
          ARC_CLOUDFORMATION:
            Ref: AWS::StackName
          ARC_APP_NAME: architect-serverless-app
          ARC_HTTP: aws_proxy
          NODE_ENV: staging
          SESSION_TABLE_NAME: jwe
          TASKS_TABLE_NAME:
            Fn::ImportValue: cognito-stack-dev-SharedTasksTableName
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        PutTasksTaskOwnerTaskIdEvent:
          Type: Api
          Properties:
            Path: /tasks/{taskOwner}/{taskId}
            Method: PUT
            RestApiId:
              Ref: ArchitectServerlessApp
  InvokeProxyPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: GetIndex
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${restApiId}/*/*
        - restApiId:
            Ref: ArchitectServerlessApp
  StaticBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: ArcGlobalPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: arn:aws:logs:*:*:*
      - PolicyName: ArcDynamoPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:UpdateItem
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:DescribeStream
            - dynamodb:ListStreams
            Resource:
            - Fn::Sub:
              - arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}
              - tablename:
                  Fn::ImportValue: cognito-stack-dev-SharedTasksTableName
  ParameterStorePolicy:
    Type: AWS::IAM::Policy
    DependsOn: Role
    Properties:
      PolicyName: ArcParameterStorePolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: ssm:GetParametersByPath
          Resource:
            Fn::Sub:
            - arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}
            - {}
      Roles:
      - Ref: Role
Outputs:
  API:
    Description: API Gateway
    Value:
      Fn::Sub:
      - https://${restApiId}.execute-api.${AWS::Region}.amazonaws.com/staging
      - restApiId:
          Ref: ArchitectServerlessApp
  restApiId:
    Description: HTTP restApiId
    Value:
      Ref: ArchitectServerlessApp
  BucketURL:
    Description: Bucket URL
    Value:
      Fn::Sub:
      - http://${bukkit}.s3-website-${AWS::Region}.amazonaws.com
      - bukkit:
          Ref: StaticBucket
Globals:
  Function:
    Environment:
      Variables:
        SHARED_TASKS_TABLE_NAME:
          Fn::ImportValue: cognito-stack-dev-SharedTasksTableName
